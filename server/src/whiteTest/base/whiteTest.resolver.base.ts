/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWhiteTestArgs } from "./CreateWhiteTestArgs";
import { UpdateWhiteTestArgs } from "./UpdateWhiteTestArgs";
import { DeleteWhiteTestArgs } from "./DeleteWhiteTestArgs";
import { WhiteTestFindManyArgs } from "./WhiteTestFindManyArgs";
import { WhiteTestFindUniqueArgs } from "./WhiteTestFindUniqueArgs";
import { WhiteTest } from "./WhiteTest";
import { User } from "../../user/base/User";
import { WhiteTestService } from "../whiteTest.service";

@graphql.Resolver(() => WhiteTest)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class WhiteTestResolverBase {
  constructor(
    protected readonly service: WhiteTestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WhiteTest",
    action: "read",
    possession: "any",
  })
  async _whiteTestsMeta(
    @graphql.Args() args: WhiteTestFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WhiteTest])
  @nestAccessControl.UseRoles({
    resource: "WhiteTest",
    action: "read",
    possession: "any",
  })
  async whiteTests(
    @graphql.Args() args: WhiteTestFindManyArgs
  ): Promise<WhiteTest[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WhiteTest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WhiteTest",
    action: "read",
    possession: "own",
  })
  async whiteTest(
    @graphql.Args() args: WhiteTestFindUniqueArgs
  ): Promise<WhiteTest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WhiteTest)
  @nestAccessControl.UseRoles({
    resource: "WhiteTest",
    action: "create",
    possession: "any",
  })
  async createWhiteTest(
    @graphql.Args() args: CreateWhiteTestArgs
  ): Promise<WhiteTest> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WhiteTest)
  @nestAccessControl.UseRoles({
    resource: "WhiteTest",
    action: "update",
    possession: "any",
  })
  async updateWhiteTest(
    @graphql.Args() args: UpdateWhiteTestArgs
  ): Promise<WhiteTest | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WhiteTest)
  @nestAccessControl.UseRoles({
    resource: "WhiteTest",
    action: "delete",
    possession: "any",
  })
  async deleteWhiteTest(
    @graphql.Args() args: DeleteWhiteTestArgs
  ): Promise<WhiteTest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: WhiteTest): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
